#########################################
### DOCKER SINGLE-CELL IMAGE PLATFORM ###
#########################################
# Step 1 - Import base image
#############################
FROM ubuntu:22.04 
# Label
LABEL maintainers="Anton Zhelonkin (anton.bioinf.md@gmail.com)"

####################################################
### Step 2: Set arguments and environment variables
####################################################
# Tools definition
ARG DEBIAN_FRONTEND=noninteractive
# Python environment
ARG VENV_NAME=python3.10
# R version
ARG R_VERSION_MAJOR=4
ARG R_VERSION_MINOR=4
ARG R_VERSION_PATCH=2
ARG CRAN_MIRROR=https://cran.rstudio.com/
ARG QUARTO_VER="1.6.39"
# GitHub API key
ARG GITHUB_PAT
ENV GITHUB_PAT=$GITHUB_PAT
# User definition 
ARG USER_ID=1001
ARG GROUP_ID=1001
ARG USER=mogilenko_lab
ARG GROUP=mogilenko_lab

# Define environment variables
ENV VENV_NAME=$VENV_NAME
ENV R_VERSION_MAJOR=$R_VERSION_MAJOR
ENV R_VERSION_MINOR=$R_VERSION_MINOR
ENV R_VERSION_PATCH=$R_VERSION_PATCH
ENV QUARTO_VER=$QUARTO_VER
ENV CONFIGURE_OPTIONS="--with-cairo --with-jpeglib --enable-R-shlib --with-blas --with-lapack"
ENV TZ=CT
ENV CRAN_MIRROR=$CRAN_MIRROR

# Timezone definition
ENV TZ=America/Chicago
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

############################
### Step 3: User definition
############################

# Create group and user matching host's UID/GID
RUN groupadd -g ${GROUP_ID} ${GROUP} && \
    useradd -m -u ${USER_ID} -g ${GROUP_ID} ${USER}

# Set user as owner of necessary directories
RUN mkdir -p /home/${USER}/reference_genome /home/${USER}/data && \
    chown -R ${USER}:${GROUP} /home/${USER}
RUN echo "alias ll='ls -la -G'" >> /home/${USER}/.profile

###############################
### Step 4: System dependencies
###############################

RUN apt-get update && apt-get install -y --no-install-recommends \
    # Build essentials and compilers
    build-essential \
    g++ \
    gfortran \
    make \
    cmake \
    automake \
    \
    # Python ecosystem
    python3.10 \
    python3.10-dev \
    python3.10-venv \
    python3-pip \
    python3-wheel \
    python3-setuptools \
    python3-launchpadlib \
    \
    # Development libraries
    pkg-config \
    libboost-all-dev \
    libblosc-dev \
    liblzo2-dev \
    libhdf5-serial-dev \
    libreadline-dev \
    readline-common \
    libcairo2-dev \
    libcurl4-openssl-dev \
    libfontconfig1-dev \
    libfreetype6-dev \
    libgit2-dev \
    libglpk-dev \
    libgsl-dev \
    libfribidi-dev \
    libharfbuzz-dev \
    libhdf5-dev \
    liblapack-dev \
    liblzma-dev \
    libmagick++-dev \
    libncurses-dev \
    libomp-dev \
    libopenblas-dev \
    libpcre2-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff5-dev \
    libssl-dev \
    libxml2-dev \
    libxt-dev \
    libzmq3-dev \
    libudunits2-dev \
    libgdal-dev \
    zlib1g-dev \
    libghc-zlib-dev \
    libbz2-dev \
    libzstd-dev \
    \
    # System utilities
    apt-utils \
    ca-certificates \
    curl \
    file \
    less \
    bison \
    git \
    zip \
    gzip \
    gnupg \
    locales \
    openssh-server \
    openssl \
    binutils \
    parallel \
    screen \
    shellinabox \
    software-properties-common \
    sudo \
    supervisor \
    tmux \
    tzdata \
    unzip \
    vim \
    wget \
    ftp \
    xvfb \
    \
    # TeX support
    texinfo \
    texlive \
    texlive-fonts-extra \
    \
    # Java
    openjdk-17-jre-headless \
    && locale-gen en_US.UTF-8 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*


###########################
### Step 5: R installation
###########################
RUN wget https://cran.rstudio.com/src/base/R-${R_VERSION_MAJOR}/R-${R_VERSION_MAJOR}.${R_VERSION_MINOR}.${R_VERSION_PATCH}.tar.gz && \
    tar zxvf R-${R_VERSION_MAJOR}.${R_VERSION_MINOR}.${R_VERSION_PATCH}.tar.gz && \
    rm R-${R_VERSION_MAJOR}.${R_VERSION_MINOR}.${R_VERSION_PATCH}.tar.gz

WORKDIR /R-${R_VERSION_MAJOR}.${R_VERSION_MINOR}.${R_VERSION_PATCH}
RUN ./configure ${CONFIGURE_OPTIONS} && \
    make && \
    make install

RUN locale-gen en_US.UTF-8
WORKDIR /root
RUN mkdir settings
COPY .devcontainer/install_R_packages.R .devcontainer/install_quarto.sh .devcontainer/requirements.txt ./settings/
RUN Rscript ./settings/install_R_packages.R

# Installing Quarto
RUN bash ./settings/install_quarto.sh $QUARTO_VER
COPY .devcontainer/.Rprofile /root/

#########################
### Step 6: Pip installs
#########################
# Set up virtual environment 
RUN python3 -m venv /opt/$VENV_NAME  \
    && export PATH=/opt/$VENV_NAME/bin:$PATH \
    && echo "source /opt/$VENV_NAME/bin/activate" >> ~/.bashrc
# Install dependencies first
RUN pip3 install setuptools wheel 
RUN pip3 install numpy scipy pandas
RUN pip3 install anndata==0.10.9
# Install requirements
RUN python3 -m pip install --upgrade pip setuptools wheel && \
    pip3 install -r ./settings/requirements.txt


#################################
### Step 7: Bioinformatics tools
#################################
# Creating the build directory
RUN mkdir build && \
    chown -R ${USER}:${GROUP} /build && \
    chmod 755 /build
WORKDIR /build

#################################
### Bowtie2 (with OpenMP support)
#################################
WORKDIR /build
RUN wget https://github.com/BenLangmead/bowtie2/archive/refs/tags/v2.5.4.tar.gz && \
    tar -xf v2.5.4.tar.gz

WORKDIR /build/bowtie2-2.5.4
RUN make libsais USE_SAIS_OPENMP=1 && \
    make bowtie2-build-s USE_SAIS_OPENMP=1 && \
    make -j 4 && \
    cp bowtie2* /usr/local/bin/ && \
    cp scripts/* /usr/local/bin/

####################################
### HTSlib tools: Samtools, Bcftools
####################################
RUN wget https://github.com/samtools/samtools/releases/download/1.21/samtools-1.21.tar.bz2 \
    https://github.com/samtools/bcftools/releases/download/1.21/bcftools-1.21.tar.bz2 \
    https://github.com/samtools/htslib/releases/download/1.21/htslib-1.21.tar.bz2 && \
    tar -xf htslib-1.21.tar.bz2

WORKDIR /build/htslib-1.21
RUN ./configure && make -j 4 && make install
WORKDIR /build
RUN tar -xf bcftools-1.21.tar.bz2
WORKDIR /build/bcftools-1.21
RUN make -j 4 && make install
WORKDIR /build
RUN tar -xf samtools-1.21.tar.bz2
WORKDIR /build/samtools-1.21
RUN make -j 4 && make install
WORKDIR /build

###########################
### STAR (2.7.11b update)
###########################
RUN wget https://github.com/alexdobin/STAR/archive/refs/tags/2.7.11b.tar.gz && \
    tar -xf 2.7.11b.tar.gz
WORKDIR /build/STAR-2.7.11b/bin/Linux_x86_64_static
RUN cp STAR* /usr/local/bin
WORKDIR /build

############
### kallisto
############
RUN wget https://github.com/pachterlab/kallisto/releases/download/v0.51.1/kallisto_linux-v0.51.1.tar.gz && \
    tar -xf kallisto_linux-v0.51.1.tar.gz
WORKDIR /build/kallisto
RUN cp kallisto /usr/local/bin
WORKDIR /build

##########
### Salmon
##########
WORKDIR /build
RUN wget https://github.com/COMBINE-lab/salmon/releases/download/v1.10.0/salmon-1.10.0_linux_x86_64.tar.gz && \
    tar -xf salmon-1.10.0_linux_x86_64.tar.gz
WORKDIR /build/salmon-latest_linux_x86_64/
RUN cp bin/salmon /usr/local/bin && \
    cp lib/liblzma.so.5* /usr/local/lib && \
    cp lib/libtbb* /usr/local/lib
WORKDIR /build

#############
### BEDtools
#############
RUN wget https://github.com/arq5x/bedtools2/releases/download/v2.31.1/bedtools-2.31.1.tar.gz && \
    tar -xf bedtools-2.31.1.tar.gz && cd bedtools2 && \
    make -j 4 && make install

####################################
### Java tools: Trimmomatic, FastQC 
####################################
RUN wget https://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.12.1.zip && \
    unzip fastqc_v0.12.1.zip && \
    chmod +x FastQC/fastqc && \
    cp -r FastQC /usr/share/ && \
    ln -s /usr/share/FastQC/fastqc /usr/bin/ && \
    wget http://www.usadellab.org/cms/uploads/supplementary/Trimmomatic/Trimmomatic-0.39.zip && \
    unzip Trimmomatic-0.39.zip && \
    cp -r Trimmomatic-0.39 /usr/share/ && \
    echo '#!/bin/bash\njava -jar /usr/share/Trimmomatic-0.39/trimmomatic-0.39.jar $@' > /usr/bin/trimmomatic && \
    chmod +x /usr/bin/trimmomatic

##########
### Picard
##########
# Clone the Picard repository
RUN git clone https://github.com/broadinstitute/picard.git
# Set the working directory to the cloned Picard directory
WORKDIR /build/picard
# Build Picard using Gradle and clean up after
RUN ./gradlew shadowJar
WORKDIR /build
RUN cp -r picard /usr/share/ && \
    echo '#!/bin/bash\njava -jar /usr/share/picard/build/libs/picard.jar $@' > /usr/bin/picard && \
    chmod +x /usr/bin/picard
# Return to the previous working directory
WORKDIR /build

###############
### Trim Galore
###############
RUN curl -fsSL https://github.com/FelixKrueger/TrimGalore/archive/0.6.10.tar.gz -o trim_galore.tar.gz && \
    tar xvzf trim_galore.tar.gz
WORKDIR /build/TrimGalore-0.6.10
RUN cp trim_galore /usr/local/bin
WORKDIR /build

################
### featureCounts
###############
WORKDIR /build
RUN wget https://github.com/ShiLab-Bioinformatics/subread/releases/download/2.0.2/subread-2.0.2-Linux-x86_64.tar.gz && \
    tar -xvf subread-2.0.2-Linux-x86_64.tar.gz
WORKDIR /build/subread-2.0.2-Linux-x86_64/bin
RUN cp featureCounts /usr/bin/
WORKDIR /build

########
### BWA 
########
RUN wget https://github.com/lh3/bwa/archive/refs/tags/v0.7.18.tar.gz && \
    tar -xf v0.7.18.tar.gz
WORKDIR /build/bwa-0.7.18
RUN make -j 4 && cp bwa /usr/local/bin

######### CHIP-seq tools
### USeq and Sissrs
#########
RUN mkdir /data && \
    wget https://github.com/HuntsmanCancerInstitute/USeq/releases/download/USeq_9.3.5/USeq_9.3.5.zip && \
    unzip USeq_9.3.5.zip && mv USeq_9.3.5 /usr/share/USeq && \
    wget http://dir.nhlbi.nih.gov/papers/lmi/epigenomes/sissrs/sissrs_v1.4.tar.gz && \
    tar -xf sissrs_v1.4.tar.gz && \
    cp sissrs.pl /usr/local/bin


###########################
### Cleaning up the build 
###########################
WORKDIR /build
RUN rm -rf /build/*