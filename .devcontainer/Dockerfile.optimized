#########################################
### DOCKER SINGLE-CELL IMAGE PLATFORM ###
### MULTI-STAGE BUILD (SIZE OPTIMIZED) ###
#########################################
# This Dockerfile uses multi-stage builds to eliminate intermediate layer bloat
# while preserving the ability to install R/Python packages at runtime.

#####################################
### STAGE 1: BUILDER (compile everything)
#####################################
FROM ubuntu:22.04 AS builder

LABEL maintainers="Anton Zhelonkin (anton.bioinf.md@gmail.com)"

####################################################
### Arguments and environment variables
####################################################
ARG DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Chicago LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8

# R version
ARG R_VERSION_MAJOR=4
ARG R_VERSION_MINOR=5
ARG R_VERSION_PATCH=0
ARG CRAN_MIRROR=https://cran.rstudio.com/

ENV R_VERSION_MAJOR=$R_VERSION_MAJOR \
    R_VERSION_MINOR=$R_VERSION_MINOR \
    R_VERSION_PATCH=$R_VERSION_PATCH \
    CONFIGURE_OPTIONS="--with-cairo --with-jpeglib --enable-R-shlib --with-blas --with-lapack" \
    CRAN_MIRROR=$CRAN_MIRROR

# GitHub token (build arg only)
ARG GITHUB_PAT

# User identity (for permission matching)
ARG USER_ID=1000
ARG GROUP_ID=1000
ARG USER=devuser
ARG GROUP=devgroup

####################################################
### System dependencies (builder stage)
####################################################
RUN apt-get update && apt-get install -y --no-install-recommends \
    tzdata \
    locales \
    build-essential g++ gfortran \
    git wget curl ca-certificates \
    # R build dependencies
    libcurl4-openssl-dev libssl-dev libxml2-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev \
    libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev libcairo2-dev \
    libreadline-dev libbz2-dev liblzma-dev libicu-dev libpcre3-dev zlib1g-dev \
    libblas-dev liblapack-dev gfortran \
    # X11 dependencies (required for R)
    libx11-dev libxt-dev x11proto-core-dev \
    # Python build dependencies
    python3 python3-dev python3-pip python3-venv python3-setuptools python3-wheel \
    # CLI tool build dependencies
    libbz2-dev liblzma-dev libncurses5-dev libcurl4-openssl-dev autoconf automake \
    # Keep these for runtime package installation
    && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ >/etc/timezone \
    && locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8 \
    && rm -rf /var/lib/apt/lists/*

####################################################
### Build R from source
####################################################
WORKDIR /tmp/r-build
RUN wget https://cran.rstudio.com/src/base/R-${R_VERSION_MAJOR}/R-${R_VERSION_MAJOR}.${R_VERSION_MINOR}.${R_VERSION_PATCH}.tar.gz && \
    tar zxf R-${R_VERSION_MAJOR}.${R_VERSION_MINOR}.${R_VERSION_PATCH}.tar.gz && \
    cd R-${R_VERSION_MAJOR}.${R_VERSION_MINOR}.${R_VERSION_PATCH} && \
    ./configure ${CONFIGURE_OPTIONS} && \
    make -j$(nproc) && \
    make install && \
    cd / && rm -rf /tmp/r-build

# Site-wide CRAN mirror
RUN mkdir -p /etc/R && \
    printf 'options(repos=c(CRAN="https://cloud.r-project.org"))\n' > /etc/R/Rprofile.site

####################################################
### Install R packages
####################################################
WORKDIR /opt/settings
COPY .devcontainer/install_R_core.R /opt/settings/install_R_packages.R
COPY .devcontainer/install_renv_project.R /opt/settings/
COPY .devcontainer/install_httpgd.R /opt/settings/

# Install R packages with aggressive cleanup
# Use --mount=type=secret to keep GITHUB_PAT out of layers
RUN --mount=type=secret,id=github_pat \
    if [ -f /run/secrets/github_pat ]; then \
        export GITHUB_PAT=$(cat /run/secrets/github_pat); \
    fi && \
    R -q --vanilla -f /opt/settings/install_renv_project.R && \
    R -q --vanilla -f /opt/settings/install_httpgd.R && \
    rm -rf ~/.cache/R/renv ~/.local/share/renv/cache /root/.cache/R /tmp/Rtmp* /tmp/downloaded_packages /tmp/Rd2pdf* /tmp/file*

# Generate manifest
RUN R -q -e 'pk <- as.data.frame(installed.packages()[, c("Package","Version","LibPath")]); \
             write.csv(pk, "/opt/settings/R-packages-manifest.csv", row.names = FALSE)'

####################################################
### Install Quarto (SKIPPED - not used)
####################################################
# Quarto removed to simplify build and reduce size
# If needed, install at runtime: https://quarto.org/docs/get-started/

####################################################
### Install TinyTeX
####################################################
RUN wget -qO- "https://yihui.org/tinytex/install-bin-unix.sh" | sh && \
    /root/.TinyTeX/bin/*/tlmgr install collection-latex collection-fontsrecommended \
    collection-latexextra fancyvrb framed titling ae parskip xcolor && \
    /root/.TinyTeX/bin/*/tlmgr path add && \
    rm -rf /tmp/*

####################################################
### Build Python virtual environment
####################################################
COPY .environments /opt/environments

ENV PIP_NO_CACHE_DIR=1
RUN python3 -m venv /opt/venvs/base && \
    /opt/venvs/base/bin/python -m pip install --upgrade pip setuptools wheel && \
    /opt/venvs/base/bin/python -m pip install --no-cache-dir -r /opt/environments/base_requirements.txt && \
    rm -rf ~/.cache/pip /root/.cache/pip /tmp/*

####################################################
### Build bioinformatics CLI tools
####################################################
WORKDIR /build

# HTSlib, samtools, bcftools
RUN wget https://github.com/samtools/samtools/releases/download/1.21/samtools-1.21.tar.bz2 \
    https://github.com/samtools/bcftools/releases/download/1.21/bcftools-1.21.tar.bz2 \
    https://github.com/samtools/htslib/releases/download/1.21/htslib-1.21.tar.bz2 && \
    tar -xf htslib-1.21.tar.bz2 && cd htslib-1.21 && ./configure && make -j$(nproc) && make install && cd .. && \
    tar -xf bcftools-1.21.tar.bz2 && cd bcftools-1.21 && make -j$(nproc) && make install && cd .. && \
    tar -xf samtools-1.21.tar.bz2 && cd samtools-1.21 && make -j$(nproc) && make install && cd .. && \
    rm -rf /build/*

# BEDtools
RUN wget https://github.com/arq5x/bedtools2/releases/download/v2.31.1/bedtools-2.31.1.tar.gz && \
    tar -xf bedtools-2.31.1.tar.gz && cd bedtools2 && make -j$(nproc) && make install && \
    cd / && rm -rf /build/*

# scIBD (Python-based, install to base venv)
RUN git clone https://github.com/Ying-Lab/scIBD && cd scIBD && \
    /opt/venvs/base/bin/pip install --no-cache-dir -r requirements.txt && \
    /opt/venvs/base/bin/python setup.py install && \
    cd / && rm -rf /build/scIBD /root/.cache/pip /tmp/*

####################################################
### Final cleanup in builder stage
####################################################
RUN rm -rf /build /tmp/* /var/tmp/* /var/cache/apt/* /var/lib/apt/lists/*


#####################################
### STAGE 2: RUNTIME (clean base, copy artifacts)
#####################################
FROM ubuntu:22.04 AS runtime

LABEL maintainers="Anton Zhelonkin (anton.bioinf.md@gmail.com)"
LABEL version="v0.5.1"
LABEL description="Size-optimized single-cell bioinformatics environment (multi-stage build)"

####################################################
### Arguments and environment variables (runtime)
####################################################
ARG DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Chicago LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8

ARG R_VERSION_MAJOR=4
ARG R_VERSION_MINOR=5
ARG R_VERSION_PATCH=0
ARG VENV_NAME=python3.10

ENV R_VERSION_MAJOR=$R_VERSION_MAJOR \
    R_VERSION_MINOR=$R_VERSION_MINOR \
    R_VERSION_PATCH=$R_VERSION_PATCH \
    VENV_NAME=$VENV_NAME \
    CRAN_MIRROR=https://cloud.r-project.org \
    IMAGE_FLAVOR=dev-core \
    PATH="/opt/venvs/base/bin:/root/.TinyTeX/bin/x86_64-linux:/usr/local/bin:${PATH}" \
    PIP_NO_CACHE_DIR=1 \
    VIRTUALENV_WRAPPER=/opt/venvs

####################################################
### User definition (runtime)
####################################################
ARG USER_ID=1000
ARG GROUP_ID=1000
ARG USER=devuser
ARG GROUP=devgroup

RUN apt-get update && apt-get install -y --no-install-recommends \
    tzdata \
    locales sudo \
    # Keep build-essential and dev libraries for RUNTIME package installation
    build-essential g++ gfortran \
    git wget curl ca-certificates \
    # R runtime dependencies
    libcurl4-openssl-dev libssl-dev libxml2-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev \
    libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev libcairo2-dev \
    libreadline-dev libbz2-dev liblzma-dev libicu-dev libpcre3-dev zlib1g-dev \
    libblas-dev liblapack-dev \
    # X11 dependencies (required for R)
    libx11-dev libxt-dev x11proto-core-dev \
    # Python runtime dependencies
    python3 python3-dev python3-pip python3-venv python3-setuptools python3-wheel \
    # CLI tool runtime dependencies
    libncurses5-dev libcurl4-openssl-dev \
    # Utilities
    vim nano tmux less htop && \
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ >/etc/timezone && \
    locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8 && \
    rm -rf /var/lib/apt/lists/*

# Create user with proper permissions
RUN set -eux; \
    SAN_GROUP="$(printf '%s' "${GROUP}" | tr '[:space:]' '_')"; \
    if getent group "${GROUP_ID}" >/dev/null; then \
        GROUP_NAME="$(getent group "${GROUP_ID}" | cut -d: -f1)"; \
    else \
        groupadd -g "${GROUP_ID}" "${SAN_GROUP}" || groupadd -g "${GROUP_ID}" "grp_${GROUP_ID}"; \
        GROUP_NAME="$(getent group "${GROUP_ID}" | cut -d: -f1)"; \
    fi; \
    if id -u "${USER_ID}" >/dev/null 2>&1; then \
        USER_NAME="$(getent passwd "${USER_ID}" | cut -d: -f1)"; \
    else \
        useradd -m -s /bin/bash -u "${USER_ID}" -g "${GROUP_ID}" "${USER}"; \
        USER_NAME="${USER}"; \
    fi; \
    mkdir -p /home/${USER_NAME}/reference_genome /home/${USER_NAME}/data; \
    chown -R ${USER_ID}:${GROUP_ID} /home/${USER_NAME}; \
    echo "alias ll='ls -la --color=auto'" >> /home/${USER_NAME}/.bashrc; \
    mkdir -p /etc/sudoers.d; \
    echo "${USER_NAME} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/90-${USER_NAME}; \
    chmod 440 /etc/sudoers.d/90-${USER_NAME}

####################################################
### Copy compiled artifacts from builder
####################################################

# R installation
COPY --from=builder /usr/local/lib/R /usr/local/lib/R
COPY --from=builder /usr/local/bin/R /usr/local/bin/R
COPY --from=builder /usr/local/bin/Rscript /usr/local/bin/Rscript
COPY --from=builder /etc/R /etc/R

# Quarto (SKIPPED - not installed in builder stage)

# TinyTeX
COPY --from=builder /root/.TinyTeX /root/.TinyTeX

# Python venv (base)
COPY --from=builder /opt/venvs/base /opt/venvs/base

# Bioinformatics tools (samtools, bcftools, bedtools)
COPY --from=builder /usr/local/bin/samtools /usr/local/bin/samtools
COPY --from=builder /usr/local/bin/bcftools /usr/local/bin/bcftools
COPY --from=builder /usr/local/bin/bedtools /usr/local/bin/bedtools
COPY --from=builder /usr/local/lib/libhts* /usr/local/lib/
COPY --from=builder /usr/local/include/htslib /usr/local/include/htslib

# R settings and scripts
COPY --from=builder /opt/settings /opt/settings

# Environment files for layered venvs
COPY .environments /opt/environments

# Layered venv helper script
COPY .devcontainer/create_layered_venv.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/create_layered_venv.sh

# Update shared library cache
RUN ldconfig

####################################################
### User configuration (R profiles, venv wrappers)
####################################################

# Copy .Rprofile for both root and user
COPY .devcontainer/.Rprofile /root/
RUN set -eux; \
    user_home="$(getent passwd ${USER_ID} | cut -d: -f6)"; \
    cp /root/.Rprofile "${user_home}/.Rprofile"; \
    chown ${USER_ID}:${GROUP_ID} "${user_home}/.Rprofile"; \
    mkdir -p "${user_home}/.vscode-R" /root/.vscode-R; \
    printf '# VS Code R init (placeholder)\n' > "${user_home}/.vscode-R/init.R"; \
    printf '# VS Code R init (placeholder)\n' > /root/.vscode-R/init.R; \
    chown -R ${USER_ID}:${GROUP_ID} "${user_home}/.vscode-R"; \
    # Create user R library for runtime installs
    mkdir -p "${user_home}/R/x86_64-pc-linux-gnu-library/${R_VERSION_MAJOR}.${R_VERSION_MINOR}"; \
    chown -R ${USER_ID}:${GROUP_ID} "${user_home}/R"

####################################################
### Python venv wrappers
####################################################
RUN printf '%s\n' \
  '#!/usr/bin/env bash' \
  'source /opt/venvs/base/bin/activate && exec "$@"' \
  > /usr/local/bin/py-base && chmod +x /usr/local/bin/py-base && \
  printf '%s\n' \
  '# usage: usepy base|squid|atac|comms' \
  '# Switches to layered venv (create if needed)' \
  'usepy(){ ' \
  '  case "$1" in ' \
  '    base) . /opt/venvs/base/bin/activate ;;' \
  '    squid|atac|comms) ' \
  '      if [ ! -d "/opt/venvs/$1" ]; then ' \
  '        echo "Creating layered venv: $1"; ' \
  '        python3 -m venv --system-site-packages /opt/venvs/$1; ' \
  '        if [ -f "/opt/environments/${1}_requirements.txt" ]; then ' \
  '          /opt/venvs/$1/bin/pip install --no-cache-dir -r /opt/environments/${1}_requirements.txt; ' \
  '        fi; ' \
  '      fi; ' \
  '      . /opt/venvs/$1/bin/activate ;;' \
  '    *) echo "usepy base|squid|atac|comms"; return 1;;' \
  '  esac; ' \
  '}' \
  >> /etc/bash.bashrc

####################################################
### R session wrappers
####################################################
RUN printf '%s\n' \
  '#!/usr/bin/env bash' \
  'unset USE_ARCHR' \
  'exec /opt/venvs/base/bin/radian "$@"' \
  > /usr/local/bin/r-base && chmod +x /usr/local/bin/r-base && \
  printf '%s\n' \
  '#!/usr/bin/env bash' \
  'export USE_ARCHR=1' \
  'exec /opt/venvs/base/bin/radian "$@"' \
  > /usr/local/bin/r-archr && chmod +x /usr/local/bin/r-archr

####################################################
### Final permissions and workspace
####################################################
RUN mkdir -p /workspaces/project && \
    chown -R ${USER_ID}:${GROUP_ID} /workspaces/project

WORKDIR /workspaces/project
USER ${USER_ID}:${GROUP_ID}

CMD ["/bin/bash"]
